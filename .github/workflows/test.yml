name: Test Suite

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | POETRY_VERSION=1.7.1 python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Verify Poetry installation
      run: |
        poetry --version
        which poetry

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project false

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --with dev

    - name: Install project
      run: poetry install --no-interaction

    - name: Verify installation
      run: |
        poetry run python -c "import microweldr; print(f'MicroWeldr v{microweldr.__version__} imported successfully')"
        poetry show

    - name: Run linting
      run: |
        poetry run black --check .
        poetry run isort --check-only .

    - name: Run flake8 (non-blocking)
      run: poetry run flake8 microweldr/ || true
      continue-on-error: true

    - name: Run tests
      run: |
        echo "Running tests with Python ${{ matrix.python-version }}"
        poetry run pytest --cov=microweldr --cov-report=xml -v -m "not hardware"

    - name: Test CLI installation
      run: |
        pip install -e .
        microweldr --help

    - name: Test example conversion
      run: |
        microweldr weld examples/example.svg -o test_output.gcode
        [ -f test_output.gcode ] && echo "✅ G-code generation successful"
        grep -q "Generated by MicroWeldr" test_output.gcode && echo "✅ G-code header correct"

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          coverage.xml
          test_output.gcode
          test_output.html
          .coverage
        retention-days: 30

  build-test:
    name: Test package build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check distribution
      run: twine check dist/*

    - name: Test wheel installation
      run: |
        pip install dist/*.whl
        microweldr --help
        python -c "import microweldr; print(f'MicroWeldr v{microweldr.__version__} imported successfully')"

    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          dist/
          *.log
        retention-days: 30
