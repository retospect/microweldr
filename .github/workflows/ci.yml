name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '6 4 3 * *'  # Monthly check on 3rd day at 04:06 UTC

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Add Poetry to PATH (Windows)
      if: runner.os == 'Windows'
      run: echo "$env:USERPROFILE\.local\bin" >> $env:GITHUB_PATH
      shell: powershell
      
    - name: Install Poetry via pip (Windows fallback)
      if: failure() && runner.os == 'Windows'
      run: |
        python -m pip install --user poetry
        echo "$env:USERPROFILE\AppData\Roaming\Python\Scripts" >> $env:GITHUB_PATH
      shell: powershell
      
    - name: Verify Poetry installation
      run: poetry --version
      
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --with dev
      
    - name: Run linting tests
      run: poetry run pytest tests/test_linting.py -v
      
    - name: Run unit tests
      run: poetry run pytest tests/ --cov=microweldr --cov-report=xml --cov-report=term-missing -v
      
    - name: Run Bandit security scan
      run: poetry run bandit -r microweldr/ -f json -o bandit-report.json || true
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ matrix.os }}-${{ matrix.python-version }}
        path: bandit-report.json

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - uses: snok/install-poetry@v1
    - run: poetry install --with dev
    - run: poetry run black --check .
    - run: poetry run isort --check-only .
    - run: poetry run flake8 .
    - run: poetry run mypy microweldr/ || true  # Allow mypy to fail until type annotations are complete

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - uses: snok/install-poetry@v1
    - run: poetry install --with dev
    - run: poetry run bandit -r microweldr/
