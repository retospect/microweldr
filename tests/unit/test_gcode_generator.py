"""Tests for the G-code generator module."""

import tempfile
from pathlib import Path
from unittest.mock import Mock

import pytest

from svg_welder.core.config import Config
from svg_welder.core.gcode_generator import GCodeGenerator
from svg_welder.core.models import WeldPath, WeldPoint


class TestGCodeGenerator:
    """Test cases for GCodeGenerator class."""

    def create_temp_config(self, content: str) -> Path:
        """Create a temporary config file for testing."""
        with tempfile.NamedTemporaryFile(mode="w", suffix=".toml", delete=False) as f:
            f.write(content)
            return Path(f.name)

    def create_test_config(self) -> Config:
        """Create a test configuration."""
        config_content = """
[printer]
bed_size_x = 250.0

[nozzle]
outer_diameter = 1.0
inner_diameter = 0.2

[temperatures]
bed_temperature = 60
nozzle_temperature = 200
cooldown_temperature = 50

[movement]
move_height = 5.0
travel_speed = 6000
z_speed = 300

[normal_welds]
weld_height = 0.2
weld_temperature = 200
spot_dwell_time = 0.5
dot_spacing = 2.0
initial_dot_spacing = 8.0
cooling_time_between_passes = 2.0

[light_welds]
weld_height = 0.5
weld_temperature = 180
spot_dwell_time = 0.3
dot_spacing = 3.0
initial_dot_spacing = 12.0
cooling_time_between_passes = 1.5

[output]
gcode_extension = ".gcode"

[animation]
time_between_welds = 0.1
pause_time = 3.0
min_animation_duration = 10.0
        """
        config_path = self.create_temp_config(config_content)
        try:
            return Config(config_path)
        finally:
            config_path.unlink()

    def test_gcode_generator_initialization(self):
        """Test G-code generator initialization."""
        config = self.create_test_config()
        generator = GCodeGenerator(config)

        assert generator.config == config

    def test_generate_basic_gcode(self):
        """Test generating basic G-code."""
        config = self.create_test_config()
        generator = GCodeGenerator(config)

        # Create test weld paths
        weld_paths = [
            WeldPath(
                svg_id="test1",
                weld_type="normal",
                points=[
                    WeldPoint(10.0, 10.0, "normal"),
                    WeldPoint(20.0, 10.0, "normal"),
                    WeldPoint(30.0, 10.0, "normal"),
                ],
            )
        ]

        with tempfile.NamedTemporaryFile(mode="w", suffix=".gcode", delete=False) as f:
            output_path = Path(f.name)

        try:
            generator.generate_file(weld_paths, output_path)

            # Verify file was created
            assert output_path.exists()
            assert output_path.stat().st_size > 0

            # Read and verify content
            content = output_path.read_text()

            # Check for header
            assert "Generated by SVG to G-code Welder" in content
            assert "Total paths: 1" in content

            # Check for initialization commands
            assert "G90" in content  # Absolute positioning
            assert "M83" in content  # Relative extruder positioning
            assert "G28" in content  # Home all axes

            # Check for heating commands
            assert "M140 S60" in content  # Set bed temperature
            assert "M190 S60" in content  # Wait for bed temperature
            assert (
                "M104 S200" in content or "M109 S200" in content
            )  # Nozzle temperature

            # Check for welding commands
            assert "G1 X" in content  # Movement commands
            assert "G4 P" in content  # Dwell commands

        finally:
            if output_path.exists():
                output_path.unlink()

    def test_generate_with_skip_bed_leveling(self):
        """Test generating G-code with bed leveling skipped."""
        config = self.create_test_config()
        generator = GCodeGenerator(config)

        weld_paths = [
            WeldPath(
                svg_id="test1",
                weld_type="normal",
                points=[WeldPoint(10.0, 10.0, "normal")],
            )
        ]

        with tempfile.NamedTemporaryFile(mode="w", suffix=".gcode", delete=False) as f:
            output_path = Path(f.name)

        try:
            generator.generate_file(weld_paths, output_path, skip_bed_leveling=True)

            content = output_path.read_text()

            # Verify bed leveling is skipped
            assert "G29" not in content  # Auto bed leveling should not be present

        finally:
            if output_path.exists():
                output_path.unlink()

    def test_generate_light_welds(self):
        """Test generating G-code for light welds."""
        config = self.create_test_config()
        generator = GCodeGenerator(config)

        weld_paths = [
            WeldPath(
                svg_id="light1",
                weld_type="light",
                points=[
                    WeldPoint(10.0, 10.0, "light"),
                    WeldPoint(20.0, 10.0, "light"),
                ],
            )
        ]

        with tempfile.NamedTemporaryFile(mode="w", suffix=".gcode", delete=False) as f:
            output_path = Path(f.name)

        try:
            generator.generate_file(weld_paths, output_path)

            content = output_path.read_text()

            # Check for light weld temperature
            assert (
                "M104 S180" in content or "M109 S180" in content
            )  # Light weld temperature

        finally:
            if output_path.exists():
                output_path.unlink()

    def test_generate_stop_points(self):
        """Test generating G-code for stop points."""
        config = self.create_test_config()
        generator = GCodeGenerator(config)

        weld_paths = [
            WeldPath(
                svg_id="stop1",
                weld_type="stop",
                points=[WeldPoint(10.0, 10.0, "stop")],
                pause_message="Test pause message",
            )
        ]

        with tempfile.NamedTemporaryFile(mode="w", suffix=".gcode", delete=False) as f:
            output_path = Path(f.name)

        try:
            generator.generate_file(weld_paths, output_path)

            content = output_path.read_text()

            # Check for pause command with message
            assert "M0" in content  # Pause command
            assert "Test pause message" in content

        finally:
            if output_path.exists():
                output_path.unlink()

    def test_generate_mixed_weld_types(self):
        """Test generating G-code for mixed weld types."""
        config = self.create_test_config()
        generator = GCodeGenerator(config)

        weld_paths = [
            WeldPath(
                svg_id="normal1",
                weld_type="normal",
                points=[WeldPoint(10.0, 10.0, "normal")],
            ),
            WeldPath(
                svg_id="light1",
                weld_type="light",
                points=[WeldPoint(20.0, 10.0, "light")],
            ),
            WeldPath(
                svg_id="stop1",
                weld_type="stop",
                points=[WeldPoint(30.0, 10.0, "stop")],
                pause_message="Check progress",
            ),
        ]

        with tempfile.NamedTemporaryFile(mode="w", suffix=".gcode", delete=False) as f:
            output_path = Path(f.name)

        try:
            generator.generate_file(weld_paths, output_path)

            content = output_path.read_text()

            # Check for all weld types
            assert (
                "M104 S200" in content or "M109 S200" in content
            )  # Normal temperature
            assert "M104 S180" in content or "M109 S180" in content  # Light temperature
            assert "M0" in content  # Stop command
            assert "Check progress" in content  # Stop message

        finally:
            if output_path.exists():
                output_path.unlink()

    def test_generate_multipass_welding(self):
        """Test multipass welding generation."""
        config = self.create_test_config()
        generator = GCodeGenerator(config)

        # Create path with multiple points to trigger multipass
        points = [WeldPoint(float(i), 10.0, "normal") for i in range(10, 50, 2)]

        weld_paths = [WeldPath(svg_id="multipass1", weld_type="normal", points=points)]

        with tempfile.NamedTemporaryFile(mode="w", suffix=".gcode", delete=False) as f:
            output_path = Path(f.name)

        try:
            generator.generate_file(weld_paths, output_path)

            content = output_path.read_text()

            # Check for multipass indicators
            assert "Multi-pass welding" in content
            assert "Pass 1/" in content
            assert "Cooling time between passes" in content

        finally:
            if output_path.exists():
                output_path.unlink()

    def test_generate_empty_weld_paths(self):
        """Test generating G-code with empty weld paths."""
        config = self.create_test_config()
        generator = GCodeGenerator(config)

        weld_paths = []

        with tempfile.NamedTemporaryFile(mode="w", suffix=".gcode", delete=False) as f:
            output_path = Path(f.name)

        try:
            generator.generate_file(weld_paths, output_path)

            # Should still create a valid file with initialization and cooldown
            assert output_path.exists()
            content = output_path.read_text()

            # Should have basic structure even with no welds
            assert "Generated by SVG to G-code Welder" in content
            assert "Total paths: 0" in content
            assert "G90" in content  # Still has initialization

        finally:
            if output_path.exists():
                output_path.unlink()

    def test_generate_with_long_pause_message(self):
        """Test generating G-code with long pause message (should be truncated)."""
        config = self.create_test_config()
        generator = GCodeGenerator(config)

        long_message = "This is a very long pause message that exceeds the 50 character limit for G-code safety"

        weld_paths = [
            WeldPath(
                svg_id="stop1",
                weld_type="stop",
                points=[WeldPoint(10.0, 10.0, "stop")],
                pause_message=long_message,
            )
        ]

        with tempfile.NamedTemporaryFile(mode="w", suffix=".gcode", delete=False) as f:
            output_path = Path(f.name)

        try:
            generator.generate_file(weld_paths, output_path)

            content = output_path.read_text()

            # Message should be truncated to 50 characters
            assert "M0" in content
            # Should not contain the full long message
            assert long_message not in content

        finally:
            if output_path.exists():
                output_path.unlink()
