"""G-code generation functionality."""

from pathlib import Path
from typing import List, TextIO

from svg_welder.core.config import Config
from svg_welder.core.models import WeldPath


class GCodeGenerator:
    """Generator for G-code files from weld paths."""

    def __init__(self, config: Config) -> None:
        """Initialize G-code generator."""
        self.config = config

    def generate_file(self, weld_paths: List[WeldPath], output_path: str | Path, 
                     skip_bed_leveling: bool = False) -> None:
        """Generate G-code file from weld paths."""
        output_path = Path(output_path)
        
        with open(output_path, 'w') as f:
            self._write_header(f, weld_paths)
            self._write_initialization(f, skip_bed_leveling)
            self._write_heating(f)
            self._write_user_pause(f)
            self._write_welding_sequence(f, weld_paths)
            self._write_cooldown(f)

    def _write_header(self, f: TextIO, weld_paths: List[WeldPath]) -> None:
        """Write G-code header."""
        f.write("; Generated by SVG to G-code Welder\n")
        f.write("; Prusa Core One Plastic Welding G-code\n")
        f.write(f"; Total paths: {len(weld_paths)}\n\n")

    def _write_initialization(self, f: TextIO, skip_bed_leveling: bool) -> None:
        """Write printer initialization commands."""
        f.write("; Initialize printer\n")
        f.write("G90 ; Absolute positioning\n")
        f.write("M83 ; Relative extruder positioning\n")
        f.write("G28 ; Home all axes\n\n")
        
        # Bed leveling (optional)
        if not skip_bed_leveling:
            f.write("; Bed leveling\n")
            f.write("G29 ; Auto bed leveling\n\n")

    def _write_heating(self, f: TextIO) -> None:
        """Write heating commands."""
        bed_temp = self.config.get('temperatures', 'bed_temperature')
        nozzle_temp = self.config.get('temperatures', 'nozzle_temperature')
        
        f.write(f"; Heat bed to {bed_temp}°C\n")
        f.write(f"M140 S{bed_temp} ; Set bed temperature\n")
        f.write(f"M190 S{bed_temp} ; Wait for bed temperature\n\n")
        
        f.write(f"; Heat nozzle to {nozzle_temp}°C\n")
        f.write(f"M104 S{nozzle_temp} ; Set nozzle temperature\n")
        f.write(f"M109 S{nozzle_temp} ; Wait for nozzle temperature\n\n")

    def _write_user_pause(self, f: TextIO) -> None:
        """Write user pause for plastic sheet insertion."""
        f.write("; Pause for user to insert plastic sheets\n")
        f.write("M0 ; Pause - Insert plastic sheets and press continue\n\n")

    def _write_welding_sequence(self, f: TextIO, weld_paths: List[WeldPath]) -> None:
        """Write the main welding sequence."""
        move_height = self.config.get('movement', 'move_height')
        z_speed = self.config.get('movement', 'z_speed')
        travel_speed = self.config.get('movement', 'travel_speed')
        
        f.write(f"G1 Z{move_height} F{z_speed} ; Move to safe height\n\n")
        
        current_nozzle_temp = self.config.get('temperatures', 'nozzle_temperature')
        
        for path in weld_paths:
            f.write(f"; Processing path: {path.svg_id} (type: {path.weld_type})\n")
            
            if path.weld_type == 'stop':
                # Handle stop points with custom messages
                message = path.pause_message or 'Manual intervention required'
                # Escape quotes and limit message length for G-code safety
                safe_message = message.replace('"', "'").replace(';', ',')[:50]
                f.write(f'M0 "{safe_message}" ; User stop requested\n\n')
                continue
            
            # Get settings for this weld type
            weld_config = self.config.get_section(f'{path.weld_type}_welds')
            
            # Set temperature if different
            if weld_config['weld_temperature'] != current_nozzle_temp:
                current_nozzle_temp = weld_config['weld_temperature']
                f.write(f"M104 S{current_nozzle_temp} ; Set temperature for {path.weld_type} welds\n")
                f.write(f"M109 S{current_nozzle_temp} ; Wait for temperature\n")
            
            # Process each point in the path
            for point in path.points:
                # Move to position at safe height
                f.write(f"G1 X{point.x:.3f} Y{point.y:.3f} Z{move_height} F{travel_speed}\n")
                
                # Lower to weld height
                f.write(f"G1 Z{weld_config['weld_height']:.3f} F{z_speed}\n")
                
                # Dwell for welding
                dwell_ms = int(weld_config['spot_dwell_time'] * 1000)
                f.write(f"G4 P{dwell_ms} ; Dwell for welding\n")
                
                # Raise to safe height
                f.write(f"G1 Z{move_height} F{z_speed}\n")
            
            f.write("\n")

    def _write_cooldown(self, f: TextIO) -> None:
        """Write cooldown and end sequence."""
        cooldown_temp = self.config.get('temperatures', 'cooldown_temperature')
        
        f.write("; Cool down\n")
        f.write(f"M104 S{cooldown_temp} ; Cool nozzle\n")
        f.write(f"M140 S{cooldown_temp} ; Cool bed\n")
        f.write("G28 X Y ; Home X and Y\n")
        f.write("M84 ; Disable steppers\n")
        f.write("; End of G-code\n")
