[tool.poetry]
name = "microweldr"
version = "5.0.3"
description = "Convert SVG files to Prusa Core One G-code for plastic welding applications - microfluidics prototyping with 3D printers"
authors = ["Reto Stamm <reto@retospect.ch>"]
maintainers = ["Reto Stamm <reto@retospect.ch>"]
readme = "README.md"
packages = [{include = "microweldr"}]
license = "MIT"
homepage = "https://github.com/retospect/microweldr"
repository = "https://github.com/retospect/microweldr"
documentation = "https://github.com/retospect/microweldr/blob/main/README.md"
keywords = [
    "svg", "gcode", "3d-printing", "welding", "prusa", "microfluidics",
    "plastic-welding", "core-one", "manufacturing", "automation", "cad",
    "prototyping", "lab-on-chip", "bioengineering"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Manufacturing",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Healthcare Industry",
    "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: System :: Hardware :: Hardware Drivers",
    "Topic :: Multimedia :: Graphics :: Graphics Conversion",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Typing :: Typed",
]

[tool.poetry.dependencies]
python = ">=3.10"
toml = "^0.10.2"
requests = "^2.28.0"
lxml = "^5.0.0"
xmlschema = "^2.0.0"
gcodeparser = "^0.2.0"
pygcode = "^0.2.0"
click = "^8.0.0"
tqdm = "^4.65.0"

[tool.poetry.group.dev.dependencies]
pytest = ">=7.4.0,<9.0.0"
pytest-cov = "^7.0.0"
black = "^25.9.0"
isort = ">=5.12.0,<6.0.0"
flake8 = ">=6.0.0,<8.0.0"
mypy = ">=1.5.0,<2.0.0"
pre-commit = ">=3.4.0,<4.0.0"
bandit = ">=1.7.5,<2.0.0"
hypothesis = "^6.0.0"
requests-mock = "^1.12.0"
bump-my-version = "^1.2.0"
types-requests = "^2.31.0"
types-toml = "^0.10.8"

# All features included by default - no optional extras needed

[tool.poetry.scripts]
microweldr = "microweldr.cli.main:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["microweldr"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
markers = [
    "integration: marks tests as integration tests (requires printer connection)",
    "slow: marks tests as slow running",
    "hardware: marks tests as requiring physical hardware (printer connection)",
]
testpaths = ["tests"]
addopts = "-ra -q --strict-markers --cov=microweldr --cov-report=term-missing"
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["microweldr"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process_args for test files

[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/tests/*.py"]
