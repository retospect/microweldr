[tool.poetry]
name = "svg-welder"
version = "1.1.0"
description = "Convert SVG files to Prusa Core One G-code for plastic welding"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "svg_welder"}]
license = "MIT"
repository = "https://github.com/yourusername/svg-welder"
keywords = ["svg", "gcode", "3d-printing", "welding", "prusa"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Manufacturing",
    "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[tool.poetry.dependencies]
python = "^3.8.1"
toml = "^0.10.2"
requests = "^2.28.0"

lxml = {version = "^5.0.0", optional = true}
xmlschema = {version = "^2.0.0", optional = true}
gcodeparser = {version = "^0.2.0", optional = true}
pygcode = {version = "^0.2.0", optional = true}

# Development dependencies
pytest = {version = "^7.0.0", optional = true}
pytest-cov = {version = "^4.0.0", optional = true}
black = {version = "^23.0.0", optional = true}
isort = {version = "^5.12.0", optional = true}
flake8 = {version = "^6.0.0", optional = true}
mypy = {version = "^1.0.0", optional = true}
pre-commit = {version = "^3.0.0", optional = true}

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-cov = "^4.0.0"
black = "^23.0.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.0.0"
pre-commit = "^3.0.0"

[tool.poetry.extras]
validation = ["lxml", "xmlschema", "gcodeparser", "pygcode"]
dev = ["pytest", "pytest-cov", "black", "isort", "flake8", "mypy", "pre-commit"]

[tool.poetry.scripts]
svg-welder = "svg_welder.cli.main:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["svg_welder"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --cov=svg_welder --cov-report=term-missing"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["svg_welder"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
